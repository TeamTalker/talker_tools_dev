<objdefs appVersion="1.0.12">
   <obj.normal id="tktl reader vsm2" uuid="27dcf1ec-8175-452b-b021-ea39a99cbfeb">
      <sDescription>Read LPC data-stream from VSM2-format ROM files loaded by the tktl loader vsm2 object.
Part of the Talkie Tools object set.</sDescription>
      <author>Team Talker</author>
      <license>BSD</license>
      <helpPatch>talker_tools.axh</helpPatch>
      <inlets>
         <int32.positive name="word" description="word-select"/>
         <bool32.risingfalling name="bend"/>
         <frac32.positive name="bendposition"/>
         <bool32.risingfalling name="gate" description="play word"/>
         <bool32.risingfalling name="loop" description="loop on/off"/>
         <bool32.risingfalling name="freeze" description="freeze"/>
         <bool32.rising name="step" description="frame-step (only active when freeze turned on)"/>
         <bool32.rising name="setjump" description="set jump-point"/>
         <bool32.rising name="jump" description="jump to saved jump-point"/>
         <bool32.risingfalling name="glitch" description="glitch"/>
         <frac32.positive name="rate" description="playback rate"/>
      </inlets>
      <outlets>
         <frac32buffer name="tALKER" description="Talker Tools I-Bus connection (NOT AUDIO!)"/>
         <bool32 name="gate" description="gate signal out"/>
         <bool32.pulse name="wordend" description="pulse on word-end"/>
      </outlets>
      <displays/>
      <params>
         <int32 name="word" description="word-select">
            <MinValue i="0"/>
            <MaxValue i="1024"/>
         </int32>
         <bool32.tgl name="bend"/>
         <frac32.u.map name="bendposition" description=""/>
         <bool32.tgl name="play" description="play word"/>
         <bool32.tgl name="oneshot" description="one-shot playback on/off"/>
         <bool32.tgl name="loop" description="loop on/off"/>
         <bool32.tgl name="freeze" description="freeze"/>
         <bool32.mom name="step" description="step frame (only works in freeze mode)"/>
         <bool32.mom name="setjump" description="set jump-point"/>
         <bool32.mom name="jump" description="jump to jump-point"/>
         <bool32.mom name="glitch" description="glitch on/off"/>
         <frac32.u.map name="rate" description="playback rate"/>
      </params>
      <attribs>
         <combo name="debug" description="display extended info in console">
            <MenuEntries>
               <string>off</string>
               <string>on</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string>1</string>
            </CEntries>
         </combo>
      </attribs>
      <includes>
         <include>./inc/toneburst-utility-functions.h</include>
		 <include>./inc/lpc_stream.h</include>
		 <include>./inc/file_io.h</include>
      </includes>
      <code.declaration><![CDATA[// START LOCAL DATA

/*
 * Reader for VSM2 LPC ROMs.
 * Obsolete as VSM2 format updated
 * 
 * Adapted from MAME tms5220.cpp by Frank Palazzolo et. al
 * https://github.com/mamedev/mame/blob/master/src/devices/sound/tms5220.cpp
 * 
 * With thanks.
 * Your work is Amazing, guys!
 * 
 * toneburst/Team Talker 2018
 */

///////////////////////
// Object state vars //
///////////////////////

bool disable;
bool firstrun;

///////////////
// Word vars //
///////////////

uint16_t word_count;
uint32_t word_index;
uint32_t word_index_old;

struct BentData {
	//char spelling[8];
	uint8_t spelling[8];
} *bend_data;

uint8_t bend_spelling[8];

/////////////
// Structs //
/////////////

// Structs defined in ./inc/file_io.h
struct TktlVSM2WordMeta *ptr_vsm2_word_meta_start;
struct TktlVSM2WordMeta *ptr_vsm2_word_meta;
uint32_t vsm2_rom_size;

//////////////////
// Control vars //
//////////////////

// Flags
bool      bend;
bool      gate;
bool      loop;
bool      glitch;
bool      freeze;
bool      step;
bool      setjump;
bool      jump;


uint32_t bend_position;
uint32_t bend_position_old;

// Playback rate
uint32_t rate;
uint32_t rate_old;
uint32_t frame_length;

///////////////
// Functions //
///////////////

// Check include-file ./inc/file_io.h
// TktlDisplayWordMeta();

/////////////
// Classes //
/////////////

// Check include-file ./inc/file_io.h

//////////////////////////////////////
// Instantiate Stream-Reader object //
//////////////////////////////////////

// Object defined in ./inc/lpc_stream.h
TktlGetLPCFrame get_frame;
TktlLpcIndices lpc_indices;

// END LOCAL DATA]]></code.declaration>
      <code.init><![CDATA[// START INIT

LogTextMessage("\n//////////////////////////////////////////");
LogTextMessage("// Initialising Talkie Tools ROM Reader //");
LogTextMessage("//////////////////////////////////////////\n");

if(attr_debug)
	LogTextMessage("Extended information display on\n");

////////////////////
// Error-checking //
////////////////////

disable = false;
firstrun = true;

if(TktlShared::vsm2_word_count_ == 0) {
	LogTextMessage("ERROR: VSM2 ROM file not loaded, exiting");
	disable = true;
	return;
} else {
	LogTextMessage("Done...");
};

//////////////////////
//Setup object vars //
//////////////////////

word_count = TktlShared::vsm2_word_count_;
word_index        = 0;
word_index_old    = 1023;

bend_position     = 0;
bend_position_old = 0;
bend_data         = {};

ptr_vsm2_word_meta_start = TktlShared::ptr_vsm2_word_meta_sdram_;
vsm2_rom_size = TktlShared::vsm2_rom_size_;
ptr_vsm2_word_meta = ptr_vsm2_word_meta_start;

// Default playback rate
rate          = 0;
rate_old      = 1;
frame_length  = 75;

bend          = false;
gate          = false;
loop          = false;
glitch        = false;
freeze        = false;
step          = false;
jump          = false;
setjump       = false;

get_frame.SetPitchBits(TktlShared::rom_pitch_bits_);

///////////////////////
// Display Word Meta //
///////////////////////

TktlDisplayWordMeta(attr_debug, word_index, ptr_vsm2_word_meta);

// END INIT]]></code.init>
      <code.krate><![CDATA[// START K-RATE

//////////////////////////////////////
// Exit early if no word-data found //
//////////////////////////////////////

if(disable)
	return;

//////////////////////
// New word-pointer //
//////////////////////

word_index = Max16(param_word, (word_count -1) + inlet_word);
bend_position = ScaleU32(__USAT(inlet_bendposition + param_bendposition, 27), TktlShared::vsm2_rom_size_);

if(param_bend || inlet_bend) {
	if((bend_position != bend_position_old) || (!bend)) {
		get_frame.SetWordStart(TktlShared::ptr_vsm2_sdram_ + bend_position);
		bend_position_old = bend_position;
	};
	bend = true;
} else {
	if((word_index != word_index_old) || (bend)) {
		ptr_vsm2_word_meta = ptr_vsm2_word_meta_start + word_index;
		TktlDisplayWordMeta(attr_debug, word_index, ptr_vsm2_word_meta);
		get_frame.SetWordStart(TktlShared::ptr_vsm2_sdram_ + ptr_vsm2_word_meta -> lpc_entry_point);
		word_index_old = word_index;
	};
	bend = false;
};

//////////////////
// Rate control //
//////////////////

// Original rate = 75 k-rate cycles (25ms)
rate = __USAT(param_rate + inlet_rate, 27);

if(rate != rate_old) {
	// Calculate new k-rate counter divisor
	frame_length = MapU32(CurveLog32(rate), 480, 32);
	get_frame.SetFrameLength(frame_length);
	rate_old = rate;
};

/////////////////
// Handle LOOP //
/////////////////

if(param_loop || inlet_loop) {
	get_frame.SetLoop(true);
	loop = true;
} else {
	get_frame.SetLoop(false);
	loop = false;
};

///////////////////
// Handle FREEZE //
///////////////////

// Set freeze to false if this is first k-rate cycle
// Allows first frame LPC to be captured, if patch starts with freeze on
if(param_freeze || inlet_freeze) {
	get_frame.SetFreeze((param_freeze || inlet_freeze));
} else {
	get_frame.SetFreeze(false);
};

///////////////////
// Handle GLITCH //
///////////////////

if(param_glitch || inlet_glitch) {
	get_frame.SetGlitch(true);
} else {
	get_frame.SetGlitch(false);
};

/////////////////////////////
// Handle rising-edge STEP //
/////////////////////////////

if(param_step || inlet_step) {
	if(!step)
		get_frame.StepFrozenFrame();
	step = true;
} else {
	step = false;
};

/////////////////////////////////
// Handle rising-edge SET-JUMP //
/////////////////////////////////

if(param_setjump || inlet_setjump) {
	if(!setjump)
		get_frame.SetJumpPoint();
	setjump = true;
} else {
	setjump = false;
};

/////////////////////////////
// Handle rising-edge JUMP //
/////////////////////////////

if(param_jump || inlet_jump) {
	if(!jump)
		get_frame.SetToJumpPoint();
	jump = true;
} else {
	jump = false;
};

/////////////////////
/////////////////////
//// Handle GATE ////
/////////////////////
/////////////////////

if((param_play || inlet_gate)) {
	if(!gate && ((param_bend) || (inlet_bend))) {
		bend_data = (struct BentData *)bend_position;
		for(int i = 0; i < 8; i++) {
			bend_spelling[i] = bend_data -> spelling[i] >> 1;
		};
		LogTextMessage("==== Talker Tools Reader message: ====");
		LogTextMessage("Bent word: %s\n", bend_spelling);
	};
	gate = true;
} else {
	gate = false;
};

get_frame.SetGate((param_play || inlet_gate), param_oneshot);

//////////////////////////////
//////////////////////////////
//// Read word LPC stream ////
//////////////////////////////
//////////////////////////////

lpc_indices = get_frame.Tick();

/////////////////
// Set outlets //
/////////////////

// LPC indices
for(int i = 0; i < 12; i++) {
	outlet_tALKER[i] = lpc_indices.indices_[i];
};

// Frame trigger outlet
outlet_tALKER[12] = lpc_indices.frame_trigger_;

// Other multiplexed outlets

// Gate
outlet_tALKER[13] = lpc_indices.is_reading_;

// Word-end
outlet_tALKER[14] = lpc_indices.word_end_trigger_;

// Connection-type (0:INDICES / >0:VALUES)
outlet_tALKER[15] = 0;

// Set gate outlet
outlet_gate = lpc_indices.is_reading_;

// Word-end outlet
outlet_wordend = lpc_indices.word_end_trigger_;

///////////////////////////
// Update first-run flag //
///////////////////////////

firstrun = false;

// END K-RATE]]></code.krate>
   </obj.normal>
</objdefs>