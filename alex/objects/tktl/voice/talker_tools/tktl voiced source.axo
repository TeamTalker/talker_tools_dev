<objdefs appVersion="1.0.12">
   <obj.normal id="tktl voiced source" uuid="20c25aa2-a8ac-4f32-9707-5c28c40fcd00">
      <sDescription>Talker Voiced Source oscillator.
Part of the Talker Tools object set.</sDescription>
      <author>Team Talker</author>
      <license>BSD</license>
      <helpPatch>osc.axh</helpPatch>
      <inlets>
         <frac32buffer.positive name="TALKEr" description="talker tools indices bus (NOT AUDIO)"/>
         <frac32.bipolar name="pitch" description="axoloti standard pitch"/>
         <bool32 name="glide" description="glide on/off"/>
         <frac32.positive name="glideamt" description="glide amount"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="voiced" description="lpc voiced source. Connect to tktl source mixer object"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch" description="pitch sweep"/>
         <int32 name="wave" description="wave-select">
            <MinValue i="0"/>
            <MaxValue i="3"/>
         </int32>
         <int32.hradio name="pmode" description="pitch mode (LPC pitch | LPC + Note | Note)">
            <MaxValue i="3"/>
         </int32.hradio>
         <bool32.tgl name="glide" description="glide on/off"/>
         <frac32.u.map name="glideamt" description="glide amount"/>
      </params>
      <attribs>
         <combo name="debug" description="display table info to console">
            <MenuEntries>
               <string>off</string>
               <string>on</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string>1</string>
            </CEntries>
         </combo>
      </attribs>
      <file-depends>
         <file-depend localFilename="./data/lpc_chirp_tables.raw" targetPath="/shared/tktl/talker_tools/lpc_chirp_tables.raw"/>
      </file-depends>
      <includes>
         <include>./inc/file_io.h</include>
         <include>./inc/toneburst-utility-functions.h</include>
      </includes>
      <code.declaration><![CDATA[//

/*
 * 
 * 
 */
 
/////////////////
// Object vars //
/////////////////

// State vars
bool disable;
bool multiple_instance;
uint8_t load_status;

////////////////
// Pitch vars //
////////////////

int32_t  pitch;
int32_t  *pitch_slewstate;
uint32_t phase_increment;
int32_t  phase_accumulator;
int32_t  phase_accumulator_old;
uint32_t table_counter;
int32_t glide;

uint8_t wave_index;

////////////////////////
// STRUCT DEFINITIONS //
////////////////////////

// Struct pointer to hold data from LPC CHIRP tables binary file copied to SDRAM
struct ChirpTables {
    char   name[16];
    int8_t chirp_table[312];
} *ptr_lpc_chirp_tables_sdram_start, *ptr_lpc_chirp_tables_sdram;

///////////////
// Functions //
///////////////

void DisplayChirpData(ChirpTables *chirp, uint8_t verbose) {
	if(verbose > 0) {
		LogTextMessage("==== Message from Talker Tools Voiced Source ====");
		LogTextMessage("Selected CHIRP table: %s", chirp -> name);
	};
};

int32_t tktl_lpc_note_table[160];

//]]></code.declaration>
      <code.init><![CDATA[//

LogTextMessage("\n/////////////////////////////////////////////");
LogTextMessage("// Initialising Talkie Tools Voiced Source //");
LogTextMessage("/////////////////////////////////////////////\n");

if(attr_debug)
	LogTextMessage("Extended information display on\n");

///////////////
// Init vars //
///////////////

// State vars
disable = false;
multiple_instance = false;
load_status = 1;

// Pitch vars
pitch                 = 0;
pitch_slewstate       = 0;
phase_increment       = 0;
phase_accumulator     = 0;
phase_accumulator_old = 0; // Init to high value, so will immediately roll over;
table_counter         = 0;
glide                 = 0;

wave_index            = 0;

////////////////////////////////////////////
// Attempts to load CHIRP data into sdram //
////////////////////////////////////////////

// Check if file already copied to SDRAM
// (pointer set in TktlShared class)
if(!TktlShared::ptr_lpc_chirp_tables_sdram_) {

	// Run file-loader (in incl. file) and save return-status
	// Pointer to SDRAM data passed by reference
	load_status = TktlLoadFileSDRAM("/shared/tktl/talker_tools/lpc_chirp_tables.raw", TktlShared::ptr_lpc_chirp_tables_sdram_, attr_debug);

	// Check return of file-loader function
	if(load_status != 0) {
		LogTextMessage("ERROR: File-loader failed to load file to SDRAM, exiting");
		return;
	};
} else {
	LogTextMessage("Reusing data loaded by the first instance of this object.");
	multiple_instance = true;
};

////////////////////
// Setup pointers //
////////////////////

// Cast pointer to struct type, and make copy so we
// can increment pointer location for alternative tables
ptr_lpc_chirp_tables_sdram_start = (struct ChirpTables *)TktlShared::ptr_lpc_chirp_tables_sdram_;
ptr_lpc_chirp_tables_sdram = ptr_lpc_chirp_tables_sdram_start;

////////////////////////////////////////////////////////
// Lookup table for LPC pitch to Axoloti note numbers //
////////////////////////////////////////////////////////

int32_t tktl_lpc_note_table[160] = {
115790251,90624427,75894288,65458603,57357019,50728464,45113610,40292779,35980152,32191195,28717186,25535391,22642938,19947786,17447433,15126955,12880472,10814328,8883116,7025371,5163085,3501388,1864758,369567,-1076214,-2581968,-3906733,-5281676,-6578478,-7786571,-8895259,-10038868,-11219673,-12285351,-13383262,-14351495,-15346258,-16369048,-17243948,-18140452,-19059657,-20002738,-20775248,-21764591,-22575945,-23405846,-24040965,-24905448,-25567593,-26242038,-27161244,-27866248,-28585213,-29072557,-29816063,-30575116,-31090111,-31876566,-32410496,-32952395,-33502505,-34061083,-34915395,-35204692,-35790294,-36385497,-36990621,-37606001,-38231996,-38549086,-39191697,-39517319,-40177457,-40512082,-41190731,-41534872,-42233097,-42587310,-42945013,-43306276,-44039769,-44412148,-44788385,-45168562,-45552762,-45941072,-46730379,-47131560,-47537225,-47947473,-48362410,-48782143,-48782143,-49206789,-49636458,-50071272,-50511358,-50956843,-51407862,-51407862,-51864557,-52327068,-52795546,-53270149,-53270149,-53751037,-54238381,-54238381,-54732356,-55233147,-55233147,-55740940,-56255935,-56255935,-56778341,-57308374,-57308374,-57846259,-57846259,-58392232,-58392232,-58946546,-58946546,-59509450,-59509450,-60081219,-60662136,-60662136,-60662136,-61252500,-61252500,-61852622,-61852622,-62462831,-62462831,-63083476,-63083476,-63714910,-63714910,-63714910,-64357521,-64357521,-65011712,-65011712,-65011712,-65677906,-65677906,-65677906,-66356555,-66356555,-67048130,-67048130,-67048130,-67753134,-67753134,-67753134,-68472100,-68472100,-68472100,-68472100
};

//]]></code.init>
      <code.krate><![CDATA[//

////////////////////////
// Handle change WAVE //
////////////////////////

if(wave_index != param_wave) {
	ptr_lpc_chirp_tables_sdram = ptr_lpc_chirp_tables_sdram_start + param_wave;
	DisplayChirpData(ptr_lpc_chirp_tables_sdram, attr_debug);	 
	wave_index = param_wave;
};

///////////////////////
// Handle mode PITCH //
///////////////////////

switch(param_pmode) {
	case 0 :
		// MODE 0: LPC pitch
		pitch = __SSAT(tktl_lpc_note_table[inlet_TALKEr[1]], 27);
		break;
	case 1 :
		// MODE 1: Mix LPC pitch and Note
		pitch = __SSAT(tktl_lpc_note_table[inlet_TALKEr[1]] + (param_pitch + inlet_pitch), 27);
		break;
	case 2 :
		// MODE 2: Note only
		pitch = __SSAT(param_pitch + inlet_pitch, 27);
		break;
	
};

//////////////////
// Handle GLIDE //
//////////////////

// Set glide amount
glide = (param_glide || inlet_glide) ? __USAT(param_glideamt + inlet_glideamt, 27) : 0;

// Slew function in includefile ./inc/toneburst-utility-functions.h
pitch = Slew32(pitch, pitch_slewstate, glide, param_glide);

/////////////////////////
// Set phase-increment //
/////////////////////////

uint32_t phase_increment;
MTOFEXTENDED(pitch, phase_increment);

////////////////////////////////
// Loop through outlet buffer //
////////////////////////////////

int j;
for(j = 0; j < BUFSIZE; j++) {

	// Increment phase-accumulator
	phase_accumulator += phase_increment;

	// Reset table counter if accumulator has rolled over
	if(phase_accumulator_old > phase_accumulator) {		
		table_counter = 0;		
	};

	// Set outlet
	outlet_voiced[j] = ptr_lpc_chirp_tables_sdram -> chirp_table[table_counter] << 19;

	// Update table counter (ensuring doesn't run off table end)
	table_counter = (table_counter < 311) ? table_counter + 1 : 311;

	// Update old accumulator
	phase_accumulator_old = phase_accumulator;
};

 //]]></code.krate>
   </obj.normal>
</objdefs>