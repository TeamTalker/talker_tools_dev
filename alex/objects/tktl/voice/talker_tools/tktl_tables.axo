<objdefs appVersion="1.0.12">
   <obj.normal id="tktl tables" uuid="f0e017e3-be1a-4eb7-b40f-d57c4888659f">
      <sDescription>Loads original Texas Instruments LPC coefficient tables.
Part of the Talker Tools object set.</sDescription>
      <author>Team Talker</author>
      <license>BSD</license>
      <inlets>
         <frac32buffer.positive name="tALKER" description="Talker Tools index connection (NOT AUDIO!)"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="TALKEr" description="Talker Tools V-Bus connection (NOT AUDIO!)"/>
      </outlets>
      <displays/>
      <params>
         <int32 name="tables" description="LPC table-select (0 = auto-select)">
            <MinValue i="0"/>
            <MaxValue i="8"/>
         </int32>
         <bool32.tgl name="interpolation" description="frame interpolation on/off"/>
      </params>
      <attribs>
         <combo name="debug" description="display extended info in console">
            <MenuEntries>
               <string>off</string>
               <string>on</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string>1</string>
            </CEntries>
         </combo>
      </attribs>
      <file-depends>
         <file-depend localFilename="data/lpc_tables.raw" targetPath="/shared/lpc/lpc_tables.raw"/>
      </file-depends>
      <includes>
         <include>./inc/file_io.h</include>
         <include>./inc/toneburst-utility-functions.h</include>
      </includes>
      <depends>
         <depend>fatfs</depend>
      </depends>
      <code.declaration><![CDATA[// START LOCAL DATA

/*
 * LPC coefficient table lookup and interpolation.
 * Adapted from MAME tms5220.cpp by Frank Palazzolo et. al
 * https://github.com/mamedev/mame/blob/master/src/devices/sound/tms5220.cpp
 * 
 * With thanks.
 * Your work is Amazing, guys!
 * 
 * toneburst/Team Talker 2018
 */


/////////////////
// Object vars //
/////////////////

bool multiple_instance;
uint8_t load_status;
uint8_t tables;

//////////////////////////////
// Counter and Trigger vars //
//////////////////////////////

// Frame trigger
bool frame_trigger;
// interpolation reset flag
bool reset_flag;

// Counters
uint32_t  krate_counter;
uint32_t  interp_counter;
uint32_t  interp_counter_old;

// Sets interpolation cycle rate
uint8_t   interp_divisor;

// Current interpolation coefficient from table
uint8_t interp_coeff;

/////////////////////////
// Interpolation flags //
/////////////////////////

bool unvoiced_flag_new;
bool unvoiced_flag_old;
bool silent_flag_new;
bool silent_flag_old;
bool interp_inhibit;

////////////////////////
// STRUCT DEFINITIONS //
////////////////////////

// Struct pointer to hold data from LPC tables binary file copied to SDRAM
struct LpcTables {
    uint16_t    subtype;
    char        name[8];
    uint8_t     num_k;
    uint8_t     num_energy_bits;
    uint8_t     num_pitch_bits;
    uint8_t     num_k_bits[10];
    uint8_t     table_energy[16];
    uint8_t     table_pitch[64];
    int16_t     table_k[10][32];
    uint8_t     table_interp[8];
} *ptr_lpc_tables_sdram_start, *ptr_lpc_tables_sdram;

// Struct to hold frame data (current, previous frame, output frame)
struct LpcIndexValues {
	int32_t	energy;
	int32_t	pitch;
	int32_t	kvals[10];
} lpc_frame_old, lpc_frame_new, lpc_frame_out;

///////////////
// Functions //
///////////////

// Display info for selected LPC tables
void DisplayTablesInfo(LpcTables *tables, bool verbose) {
	LogTextMessage("\n==== Talker Tools Tables Message: ====");
	LogTextMessage("Selected LPC tables: %s", tables -> name);
	if(verbose) {
		LogTextMessage("Extended tables information");
		LogTextMessage("Subtype index: %d", tables -> subtype);
		LogTextMessage("Lattice filter bands: %d", tables -> num_k);
		LogTextMessage("Energy bits: %d", tables -> num_energy_bits);
		LogTextMessage("Pitch bits: %d\n", tables -> num_pitch_bits);
	};
};

// END LOCAL DATA]]></code.declaration>
      <code.init><![CDATA[// START INIT

LogTextMessage("\n//////////////////////////////////////////");
LogTextMessage("// Initialising Talkie Tools LPC Tables //");
LogTextMessage("//////////////////////////////////////////\n");

if(attr_debug)
	LogTextMessage("Extended information display on\n");


////////////////
// Frame vars //
////////////////

multiple_instance	= false;
load_status		= 0;
tables 			= TktlShared::vsm2_lpc_tables_id_;

// Frame trigger
frame_trigger		= false;
// interpolation reset flag
reset_flag		= false;

// Counters
krate_counter		= 0;
interp_counter		= 0;
interp_counter_old	= 0;

// Sets interpolation cycle rate
interp_divisor		= 4;

// Current interpolation coefficient from table
interp_coeff		= 0;

/////////////////////////////
// Zero frame data structs //
/////////////////////////////

lpc_frame_old		    = {0};
lpc_frame_new		    = {0};
lpc_frame_out		    = {0};

///////////////////////////////////////////////////////
// Attempt to load LPC coefficient tables into sdram //
///////////////////////////////////////////////////////

// Check if file already copied to SDRAM
// (pointer set in TktlShared class)
if(!TktlShared::ptr_lpc_coef_tables_sdram_) {

	// Run file-loader (in incl. file) and save return-status
	// Pointer to SDRAM data passed by reference
	load_status = TktlLoadFileSDRAM("/shared/tktl/talker_tools/lpc_tables.raw", TktlShared::ptr_lpc_coef_tables_sdram_, attr_debug);

	// Check return of file-loader function
	if(load_status != 0) {
		LogTextMessage("ERROR: File-loader failed to load file to SDRAM, exiting");
		return;
	};
} else {
	LogTextMessage("Reusing data loaded by the first instance of this object.");
	multiple_instance = true;
};

// Copy pointer so we can increment pointer location for alternative tables
ptr_lpc_tables_sdram_start = (struct LpcTables *)TktlShared::ptr_lpc_coef_tables_sdram_;
ptr_lpc_tables_sdram = ptr_lpc_tables_sdram_start;

LogTextMessage("Done...");

// END INIT]]></code.init>
      <code.krate><![CDATA[// START K-RATE

/////////////////////
// Set table index //
/////////////////////

if(tables != param_tables) {
	// Set table from inlet if set to 'auto'
	if(param_tables == 0) {
		ptr_lpc_tables_sdram = ptr_lpc_tables_sdram_start + TktlShared::vsm2_lpc_tables_id_;
	} else {
		ptr_lpc_tables_sdram = ptr_lpc_tables_sdram_start + (param_tables - 1);
	};
	// Log table ID to console
	DisplayTablesInfo(ptr_lpc_tables_sdram, attr_debug);
	tables = param_tables;
};

// Check for frame trigger
// Also disable interpolation if set to value > 1
frame_trigger = inlet_tALKER[12];

///////////////////////
//Interpolate frames //
///////////////////////

// Interpolation turn ON if param set + frame trigger is less than 2
// (allows interpolation to be disabled if value higher than 1 is sent)
if((param_interpolation) && (frame_trigger <= 1)) {

	/////////////////////////////////////
	// Reset counters on frame trigger //
	/////////////////////////////////////
	
	if(frame_trigger == 1) {
		krate_counter  = 0;
		interp_counter = 0;

		// Set reset flag if frame trigger happens during interpolation cycle
		if((interp_counter > 0) && (interp_counter <= 8)) {
			reset_flag = true;
		};
	};

	// Only interpolate if interpolation position changes
	if(interp_counter != interp_counter_old) {

		switch(interp_counter) {

			/////////////////////
			// First sub-frame //
			/////////////////////

			case 0 :
				// Set voiced/unvoiced flag for incoming frame
				// Flag set if incoming pitch index = 0
				unvoiced_flag_new = (inlet_tALKER[1] == 0) ? true : false;
				// Calculate new silent flag (true if energy = 0)
				silent_flag_new = (inlet_tALKER[0] == 0) ? true : false;

				////////////////////////////////////////////////////////
				// Decide if interpolation is required for this frame //
				////////////////////////////////////////////////////////

				/* 
				 * Comments from MAME tms5220.cpp
				 * https://github.com/mamedev/mame/blob/master/src/devices/sound/tms5220.cpp
				 * 
				 * in all cases where interpolation would be inhibited, set the inhibit flag; otherwise clear it.
				 * Interpolation inhibit cases:
				 * Old frame was voiced, new is unvoiced
				 * Old frame was silence/zero energy, new has non-zero energy
				 * Old frame was unvoiced, new is voiced
				 * Old frame was unvoiced, new frame is silence/zero energy (non-existent on tms51xx rev D and F (present and working on tms52xx, present but buggy on tms51xx rev A and B))
				 */
				if (
					((unvoiced_flag_old) && unvoiced_flag_new)
					|| ((unvoiced_flag_old) && !unvoiced_flag_new)
					|| ((silent_flag_old == 1) && !silent_flag_new)
				)
					//|| ((m_inhibit == 1) && (unvoiced_flag_old == 1) && silent_flag_new) ) //TMS51xx INTERP BUG1
					//|| ((unvoiced_flag_old == 1) && silent_flag_new) )
					interp_inhibit = true;
				else
					// normal frame, normal interpolation
					interp_inhibit = false;
				

				////////////////////////////
				// Capture new LPC values //
				////////////////////////////

				lpc_frame_new.energy   = ptr_lpc_tables_sdram -> table_energy[inlet_tALKER[0]];
				lpc_frame_new.pitch    = ptr_lpc_tables_sdram -> table_pitch[inlet_tALKER[1]];
				lpc_frame_new.kvals[0] = ptr_lpc_tables_sdram -> table_k[0][inlet_tALKER[2]];
				lpc_frame_new.kvals[1] = ptr_lpc_tables_sdram -> table_k[1][inlet_tALKER[3]];
				lpc_frame_new.kvals[2] = ptr_lpc_tables_sdram -> table_k[2][inlet_tALKER[4]];
				lpc_frame_new.kvals[3] = ptr_lpc_tables_sdram -> table_k[3][inlet_tALKER[5]];
				lpc_frame_new.kvals[4] = ptr_lpc_tables_sdram -> table_k[4][inlet_tALKER[6]];
				lpc_frame_new.kvals[5] = ptr_lpc_tables_sdram -> table_k[5][inlet_tALKER[7]];
				lpc_frame_new.kvals[6] = ptr_lpc_tables_sdram -> table_k[6][inlet_tALKER[8]];
				lpc_frame_new.kvals[7] = ptr_lpc_tables_sdram -> table_k[7][inlet_tALKER[9]];
				lpc_frame_new.kvals[8] = ptr_lpc_tables_sdram -> table_k[8][inlet_tALKER[10]];
				lpc_frame_new.kvals[9] = ptr_lpc_tables_sdram -> table_k[9][inlet_tALKER[11]];

				///////////////////////////////////////////////////
				// Set initial values for start of interpolation //
				///////////////////////////////////////////////////
				
				if(interp_inhibit) {
					// Interpolation IS inhibited
					// Set outputs to new frame
					lpc_frame_out = lpc_frame_new;
				} else {
					// Interpolation NOT inhibited, so interpolation will begin
					// If reset flag not set, set outputs to old frame for start of interpolation sub-frame sequence
					// If flag set, don't update frame_out because reset happened mid-interpolation
					if(!reset_flag)
						// Update output struct if previous interpolation cycle completed
						lpc_frame_out = lpc_frame_old;
					else
						// Else reset flag and use values from last sub-frame reached before reset
						reset_flag = false;
						
				};
				break;

			///////////////////////////////////////////
			// (Potentially) interpolated sub-frames //
			///////////////////////////////////////////

			case 1: case 2: case 3: case 4: case 5: case 6: case 7:

				// Interpolation inhibited
				if(interp_inhibit) {
					lpc_frame_out = lpc_frame_new;
				// Interpolate
				} else {
					// Extract current interpolation coefficient from table
					interp_coeff = ptr_lpc_tables_sdram -> table_interp[interp_counter];

					lpc_frame_out.energy   += ((lpc_frame_new.energy   - lpc_frame_out.energy)   >> interp_coeff);
					lpc_frame_out.pitch    += ((lpc_frame_new.pitch    - lpc_frame_out.pitch)    >> interp_coeff);
					lpc_frame_out.kvals[0] += ((lpc_frame_new.kvals[0] - lpc_frame_out.kvals[0]) >> interp_coeff);
					lpc_frame_out.kvals[1] += ((lpc_frame_new.kvals[1] - lpc_frame_out.kvals[1]) >> interp_coeff);
					lpc_frame_out.kvals[2] += ((lpc_frame_new.kvals[2] - lpc_frame_out.kvals[2]) >> interp_coeff);
					lpc_frame_out.kvals[3] += ((lpc_frame_new.kvals[3] - lpc_frame_out.kvals[3]) >> interp_coeff);
					lpc_frame_out.kvals[4] += ((lpc_frame_new.kvals[4] - lpc_frame_out.kvals[4]) >> interp_coeff);
					lpc_frame_out.kvals[5] += ((lpc_frame_new.kvals[5] - lpc_frame_out.kvals[5]) >> interp_coeff);
					lpc_frame_out.kvals[6] += ((lpc_frame_new.kvals[6] - lpc_frame_out.kvals[6]) >> interp_coeff);
					lpc_frame_out.kvals[7] += ((lpc_frame_new.kvals[7] - lpc_frame_out.kvals[7]) >> interp_coeff);
					lpc_frame_out.kvals[8] += ((lpc_frame_new.kvals[8] - lpc_frame_out.kvals[8]) >> interp_coeff);
					lpc_frame_out.kvals[9] += ((lpc_frame_new.kvals[9] - lpc_frame_out.kvals[9]) >> interp_coeff);
				};


			////////////////////
			// Last sub-frame //
			////////////////////

			// Always new frame
			case 8 :
				// Set voiced/unvoiced flag for next frame
				unvoiced_flag_old = unvoiced_flag_new;
				silent_flag_old = silent_flag_new;

				// Copy current frame to old frame
				lpc_frame_out = lpc_frame_new;
				lpc_frame_old = lpc_frame_new;

				break;

		};	// End sub-frame logic		
	};	// End interp_position change

	/////////////////////////////
	// Set interpolated output //
	/////////////////////////////

	outlet_TALKEr[0]  = lpc_frame_out.energy;
	outlet_TALKEr[1]  = lpc_frame_out.pitch;
	outlet_TALKEr[2]  = lpc_frame_out.kvals[0];
	outlet_TALKEr[3]  = lpc_frame_out.kvals[1];
	outlet_TALKEr[4]  = lpc_frame_out.kvals[2];
	outlet_TALKEr[5]  = lpc_frame_out.kvals[3];
	outlet_TALKEr[6]  = lpc_frame_out.kvals[4];
	outlet_TALKEr[7]  = lpc_frame_out.kvals[5];
	outlet_TALKEr[8]  = lpc_frame_out.kvals[6];
	outlet_TALKEr[9]  = lpc_frame_out.kvals[7];
	outlet_TALKEr[10] = lpc_frame_out.kvals[8];
	outlet_TALKEr[11] = lpc_frame_out.kvals[9];

	// Update old interp_position
	interp_counter_old = interp_counter;


//////////////////////////////
// Interpolation turned OFF //
//////////////////////////////

// Set outlet values directly from inlets
} else {

	outlet_TALKEr[0]  =  ptr_lpc_tables_sdram -> table_energy[inlet_tALKER[0]];
	outlet_TALKEr[1]  =  ptr_lpc_tables_sdram -> table_pitch[inlet_tALKER[1]];
	outlet_TALKEr[2]  =  ptr_lpc_tables_sdram -> table_k[0][inlet_tALKER[2]];
	outlet_TALKEr[3]  =  ptr_lpc_tables_sdram -> table_k[1][inlet_tALKER[3]];
	outlet_TALKEr[4]  =  ptr_lpc_tables_sdram -> table_k[2][inlet_tALKER[5]];
	outlet_TALKEr[5]  =  ptr_lpc_tables_sdram -> table_k[3][inlet_tALKER[5]];
	outlet_TALKEr[6]  =  ptr_lpc_tables_sdram -> table_k[4][inlet_tALKER[6]];
	outlet_TALKEr[7]  =  ptr_lpc_tables_sdram -> table_k[5][inlet_tALKER[7]];
	outlet_TALKEr[8]  =  ptr_lpc_tables_sdram -> table_k[6][inlet_tALKER[8]];
	outlet_TALKEr[9]  =  ptr_lpc_tables_sdram -> table_k[7][inlet_tALKER[9]];
	outlet_TALKEr[10] =  ptr_lpc_tables_sdram -> table_k[8][inlet_tALKER[10]];
	outlet_TALKEr[11] =  ptr_lpc_tables_sdram -> table_k[9][inlet_tALKER[11]];
};

//////////////////////////////////////////////////
// Pass-through other multiplexed outlet values //
//////////////////////////////////////////////////

outlet_TALKEr[12] = inlet_tALKER[12];
outlet_TALKEr[13] = inlet_tALKER[13];
outlet_TALKEr[14] = inlet_tALKER[14];
outlet_TALKEr[15] = inlet_tALKER[15];

/////////////////////
// Update counters //
/////////////////////

// Increment k-rate counter
krate_counter++;

// Increment interpolation counter
if(krate_counter % interp_divisor == 0) {
	interp_counter = (interp_counter <= 7) ? interp_counter + 1 : 8;
};

// END K-RATE]]></code.krate>
   </obj.normal>
</objdefs>